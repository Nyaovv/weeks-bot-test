import aiosqlite
import asyncio
import logging
import random
from config import BOT_TOKEN, ADMIN_ID
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from scheduler import scheduler, check_blocked_users  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º check_blocked_users
import aiocron
import os

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 9 –≤ —Ç–µ–∫—Å—Ç
def number_to_text(number: int, case: str = "–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π") -> str:
    number_words = {
        1: {"–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "–æ–¥–Ω–∞", "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "–æ–¥–Ω—É"},
        2: {"–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "–¥–≤–µ", "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "–¥–≤–µ"},
        3: {"–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "—Ç—Ä–∏", "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "—Ç—Ä–∏"},
        4: {"–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "—á–µ—Ç—ã—Ä–µ", "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "—á–µ—Ç—ã—Ä–µ"},
        5: {"–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "–ø—è—Ç—å", "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "–ø—è—Ç—å"},
        6: {"–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "—à–µ—Å—Ç—å", "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "—à–µ—Å—Ç—å"},
        7: {"–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "—Å–µ–º—å", "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "—Å–µ–º—å"},
        8: {"–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "–≤–æ—Å–µ–º—å", "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "–≤–æ—Å–µ–º—å"},
        9: {"–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "–¥–µ–≤—è—Ç—å", "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "–¥–µ–≤—è—Ç—å"}
    }
    return number_words.get(number, {}).get(case, str(number))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–Ω–µ–¥–µ–ª—è"
def get_weeks_text(weeks: int, case: str = "–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π", use_text: bool = False) -> str:
    if use_text and 1 <= weeks <= 9:
        weeks_word = number_to_text(weeks, case)
    else:
        weeks_word = str(weeks)

    if weeks % 10 == 1 and weeks % 100 != 11:
        return f"{weeks_word} –Ω–µ–¥–µ–ª—è" if case == "–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" else f"{weeks_word} –Ω–µ–¥–µ–ª—é"
    elif 2 <= weeks % 10 <= 4 and (weeks % 100 < 12 or weeks % 100 > 14):
        return f"{weeks_word} –Ω–µ–¥–µ–ª–∏" if case == "–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π" else f"{weeks_word} –Ω–µ–¥–µ–ª–∏"
    else:
        return f"{weeks_word} –Ω–µ–¥–µ–ª—å"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s", encoding="utf-8")
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
waiting_for_name = {}
waiting_for_birthdate = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_facts = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
update_button = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìú –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")]
    ],
    resize_keyboard=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("users.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            birthdate TEXT,
            last_notified_week INTEGER,
            username TEXT  -- –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
        )
        """)
        await db.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_user(user_id, name, birthdate, username):
    async with aiosqlite.connect("users.db") as db:
        await db.execute("INSERT INTO users (user_id, name, birthdate, username) VALUES (?, ?, ?, ?)", (user_id, name, birthdate, username))
        await db.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user(user_id):
    async with aiosqlite.connect("users.db") as db:
        cursor = await db.execute("SELECT name, birthdate, username FROM users WHERE user_id = ?", (user_id,))
        result = await cursor.fetchone()
        if result:
            name, birthdate, username = result
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD
                birthdate_dt = datetime.strptime(birthdate, "%Y-%m-%d")
                birthdate_user_format = birthdate_dt.strftime("%d.%m.%Y")
            except ValueError:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å
                birthdate_user_format = birthdate
            return name, birthdate_user_format, username
        return None

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def delete_user(user_id):
    async with aiosqlite.connect("users.db") as db:
        await db.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        await db.commit()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
async def update_last_notified_week(user_id, weeks_lived):
    async with aiosqlite.connect("users.db") as db:
        await db.execute("UPDATE users SET last_notified_week = ? WHERE user_id = ?", (weeks_lived, user_id))
        await db.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_all_users():
    async with aiosqlite.connect("users.db") as db:
        cursor = await db.execute("SELECT user_id, name, birthdate, last_notified_week, username FROM users")
        return await cursor.fetchall()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)

    if user:
        name, birthdate, username = user
        try:
            birthdate_dt = datetime.strptime(birthdate, "%d.%m.%Y")
            weeks_lived = (datetime.now() - birthdate_dt).days // 7
            weeks_text = get_weeks_text(weeks_lived)
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã –í—ã –ø—Ä–æ–∂–∏–ª–∏ {weeks_text}. –í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}.", reply_markup=update_button)
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—ë –∑–∞–Ω–æ–≤–æ.")
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∞–∂–¥–æ–π –ø—Ä–æ–∂–∏—Ç–æ–π –Ω–µ–¥–µ–ª–µ. –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        waiting_for_name[user_id] = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(lambda message: message.from_user.id in waiting_for_name)
async def handle_name_input(message: Message):
    user_id = message.from_user.id
    name = message.text.strip()

    if not name or len(name) < 2 or len(name) > 50:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    waiting_for_name.pop(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    waiting_for_birthdate[user_id] = name

    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message(lambda message: message.from_user.id in waiting_for_birthdate)
async def handle_birthdate_input(message: Message):
    user_id = message.from_user.id
    birthdate = message.text.strip()
    name = waiting_for_birthdate[user_id]
    username = message.from_user.username

    try:
        birthdate_dt = datetime.strptime(birthdate, "%d.%m.%Y")
        now = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        if birthdate_dt > now:
            await message.answer("–í—ã –Ω–µ –º–æ–≥–ª–∏ —Ä–æ–¥–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ —Ä–∞–Ω—å—à–µ 1900
        if birthdate_dt.year < 1900:
            await message.answer("–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ 1900 –≥–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        day_of_week = birthdate_dt.strftime("%A").lower()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    await add_user(user_id, name, birthdate, username)
    waiting_for_birthdate.pop(user_id, None)

    weeks_lived = (now - birthdate_dt).days // 7
    weeks_text = get_weeks_text(weeks_lived, case="–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π")
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {name}! üéâ –í—ã –ø—Ä–æ–∂–∏–ª–∏ {weeks_text}. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–µ!", reply_markup=update_button)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_weekly_notification_task(user_id, name, birthdate, day_of_week)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def create_weekly_notification_task(user_id, name, birthdate, day_of_week):
    @aiocron.crontab(f'0 9 * * {day_of_week[:3]}')
    async def weekly_notification_task():
        now = datetime.now()
        birthdate_dt = datetime.strptime(birthdate, "%d.%m.%Y")
        weeks_lived = (now - birthdate_dt).days // 7

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
        async with aiosqlite.connect("users.db") as db:
            cursor = await db.execute("SELECT last_notified_week FROM users WHERE user_id = ?", (user_id,))
            last_week = await cursor.fetchone()

        if last_week is None or weeks_lived > last_week[0]:
            await update_last_notified_week(user_id, weeks_lived)
            weeks_text = get_weeks_text(weeks_lived)
            await bot.send_message(user_id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}. –í—ã –ø—Ä–æ–∂–∏–ª–∏ {weeks_text}. üéâ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ü–∏—Ç–∞—Ç—ã
@dp.message(lambda message: message.text == "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É")
async def handle_quote_request(message: Message):
    try:
        with open("quotes.txt", "r", encoding="utf-8") as file:
            quotes = file.readlines()
        if quotes:
            random_quote = random.choice(quotes).strip()
            await message.answer(f"‚ú®\n\n {random_quote} ")
        else:
            await message.answer("–§–∞–π–ª —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ç–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
@dp.message(lambda message: message.text == "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def handle_update_request(message: Message):
    user_id = message.from_user.id
    await delete_user(user_id)

    waiting_for_name.pop(user_id, None)
    waiting_for_birthdate.pop(user_id, None)

    await message.answer("–î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    waiting_for_name[user_id] = None

# –†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ
def get_random_fact(birthdate, user_id):
    now = datetime.now()
    birthdate_dt = datetime.strptime(birthdate, "%d.%m.%Y")

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if user_id not in user_facts or not user_facts[user_id]:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
        facts = []

        # 1. –°–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ "–∫—Ä—É–≥–ª–æ–≥–æ" –≤–æ–∑—Ä–∞—Å—Ç–∞ (30, 40, 50 –ª–µ—Ç)
        age = (now - birthdate_dt).days // 365
        next_rounded_age = ((age // 10) + 1) * 10
        next_rounded_age_date = datetime(birthdate_dt.year + next_rounded_age, birthdate_dt.month, birthdate_dt.day)
        weeks_to_next_age = (next_rounded_age_date - now).days // 7
        weeks_text = get_weeks_text(weeks_to_next_age)
        facts.append(f"–û—Å—Ç–∞–ª–æ—Å—å {weeks_text} –¥–æ {next_rounded_age} –ª–µ—Ç!")

        # 2. –°–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –¥–æ 18 –ª–µ—Ç (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–ª–∞–¥—à–µ 18)
        if age < 18:
            adult_date = datetime(birthdate_dt.year + 18, birthdate_dt.month, birthdate_dt.day)
            weeks_to_adult = (adult_date - now).days // 7
            weeks_text = get_weeks_text(weeks_to_adult)
            facts.append(f"–û—Å—Ç–∞–ª–æ—Å—å {weeks_text} –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è (18 –ª–µ—Ç)!")

        # 3. –°–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
        next_birthday = datetime(now.year, birthdate_dt.month, birthdate_dt.day)
        if next_birthday < now:  # –ï—Å–ª–∏ –î–† —É–∂–µ –±—ã–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            next_birthday = datetime(now.year + 1, birthdate_dt.month, birthdate_dt.day)
        weeks_to_birthday = (next_birthday - now).days // 7
        weeks_text = get_weeks_text(weeks_to_birthday)
        facts.append(f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {weeks_text}!")

        # 4. –°–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –ø—Ä–æ—à–ª–æ –≤ —ç—Ç–æ–º –≥–æ–¥—É
        first_day_of_year = datetime(now.year, 1, 1)
        weeks_passed_this_year = (now - first_day_of_year).days // 7
        weeks_text = get_weeks_text(weeks_passed_this_year)
        facts.append(f"–í —ç—Ç–æ–º –≥–æ–¥—É —É–∂–µ –ø—Ä–æ—à–ª–æ {weeks_text}!")

        # 5. –°–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –¥–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞
        new_year = datetime(now.year + 1, 1, 1)
        weeks_to_new_year = (new_year - now).days // 7
        weeks_text = get_weeks_text(weeks_to_new_year)
        facts.append(f"–î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {weeks_text}!")

        # 6. –°–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –¥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –º–∏—Ä–µ (73 –≥–æ–¥–∞)
        average_lifespan = 73
        if age < average_lifespan:
            average_lifespan_date = datetime(birthdate_dt.year + average_lifespan, birthdate_dt.month, birthdate_dt.day)
            weeks_to_average_lifespan = (average_lifespan_date - now).days // 7
            weeks_text = get_weeks_text(weeks_to_average_lifespan)
            facts.append(f"–û—Å—Ç–∞–ª–æ—Å—å {weeks_text} –¥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –º–∏—Ä–µ (73 –≥–æ–¥–∞)!")
        else:
            facts.append(f"–í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –º–∏—Ä–µ (73 –≥–æ–¥–∞)!")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_facts[user_id] = facts

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
    fact = random.choice(user_facts[user_id])
    # –£–¥–∞–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    user_facts[user_id].remove(fact)

    return fact

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç—É—Å"
@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å")
async def handle_status_request(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)

    if user:
        name, birthdate, username = user
        try:
            birthdate_dt = datetime.strptime(birthdate, "%d.%m.%Y")
            weeks_lived = (datetime.now() - birthdate_dt).days // 7
            weeks_text = get_weeks_text(weeks_lived, case="–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π", use_text=True)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
            random_fact = get_random_fact(birthdate, user_id)

            await message.answer(f"{name}, –≤—ã –ø—Ä–æ–∂–∏–ª–∏ {weeks_text}. –í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}. üéâ\n\n{random_fact}")
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—ë –∑–∞–Ω–æ–≤–æ.")
    else:
        await message.answer("–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é, –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–±–∞–Ω-–ª–∏—Å—Ç
@dp.message(Command("–±–∞–Ω-–ª–∏—Å—Ç"))
async def handle_ban_list(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        with open("blocked_users.txt", "r") as f:
            blocked_users = f.readlines()
        
        if not blocked_users:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞.")
            return

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        unique_blocked_users = {}
        for line in blocked_users:
            try:
                user_id, block_time = line.strip().split(":")
                user_id = int(user_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —á–∏—Å–ª–æ
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                if user_id not in unique_blocked_users:
                    unique_blocked_users[user_id] = block_time
            except ValueError:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ blocked_users.txt: {line.strip()}")
                continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        response = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for user_id, block_time in unique_blocked_users.items():
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                user_data = await get_user(user_id)
                if user_data:
                    name, birthdate, username = user_data
                    response += (
                        f"üë§ –ò–º—è: {name}\n"
                        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}\n"
                        f"üÜî ID: {user_id}\n"
                        f"üë§ –õ–æ–≥–∏–Ω: @{username}\n"
                        f"‚è∞ –î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_time}\n\n"
                    )
                else:
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ
                    response += (
                        f"üÜî ID: {user_id}\n"
                        f"‚è∞ –î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_time}\n"
                        f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.\n\n"
                    )
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ç–≤–µ—Ç
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                response += (
                    f"üÜî ID: {user_id}\n"
                    f"‚è∞ –î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_time}\n"
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}\n\n"
                )

        await message.answer(response)
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /–±–∞–Ω-–ª–∏—Å—Ç: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s", encoding="utf-8")
    logger = logging.getLogger(__name__)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    asyncio.create_task(scheduler(bot))
    asyncio.create_task(check_blocked_users(bot))  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        await close_db_connection()

if __name__ == "__main__":
    asyncio.run(main())
